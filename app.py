{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Amnasabahat/Amnasabahat/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "stock_symbol = 'TOMCL'\n",
        "import pandas as pd\n",
        "import requests\n",
        "def get_financial_data(stock_symbol):\n",
        "    urls = {\n",
        "        \"income_statement\": f\"https://stockanalysis.com/quote/psx/{stock_symbol}/financials/\",\n",
        "        \"balance_sheet\": f\"https://stockanalysis.com/quote/psx/{stock_symbol}/financials/balance-sheet/\",\n",
        "        \"cash_flow\": f\"https://stockanalysis.com/quote/psx/{stock_symbol}/financials/cash-flow-statement/\",\n",
        "        \"ratios\": f\"https://stockanalysis.com/quote/psx/{stock_symbol}/financials/ratios/\"\n",
        "    }\n",
        "\n",
        "    data = {}\n",
        "\n",
        "    for key, url in urls.items():\n",
        "        try:\n",
        "            # Set headers to mimic a browser\n",
        "          headers = {\n",
        "                  'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n",
        "            }\n",
        "\n",
        "          # Make the request with headers\n",
        "          response = requests.get(url, headers=headers)\n",
        "          data[key] = pd.read_html(response.text)[0]\n",
        "          # dropping the second header\n",
        "          data[key].columns = data[key].columns.droplevel(1)\n",
        "\n",
        "          # transpose the dataframe and reset the column\n",
        "          data[key] = data[key].T\n",
        "          data[key].columns = data[key].iloc[0]\n",
        "          data[key] = data[key][1:]\n",
        "\n",
        "          # Cleaning the data (for converting object data to numeric)\n",
        "          # Find all columns where '%' sign is present\n",
        "          percent_columns = [col for col in data[key].columns if data[key][col].astype(object).str.contains('%').any()]\n",
        "\n",
        "          # Add '%' sign to column names\n",
        "          data[key].rename(columns={col: f\"{col} (%)\" for col in percent_columns}, inplace=True)\n",
        "\n",
        "          # dropping last row that contains \"Upgrade\" in all columns\n",
        "          data[key].drop(index = data[key].index[-1], axis = 0, inplace = True)\n",
        "\n",
        "          # replacing empty data with 0\n",
        "          data[key].replace('-', '0', inplace=True)\n",
        "\n",
        "          # replacing % with ''\n",
        "          data[key] = data[key].replace('%', '', regex=True)\n",
        "          data[key].head()\n",
        "\n",
        "          data[key] = data[key].astype(float)\n",
        "          data[key].head()\n",
        "        except Exception as e:\n",
        "            print(f\"Error retrieving data from {url}: {e}\")\n",
        "\n",
        "    return data\n"
      ],
      "metadata": {
        "id": "ggN7hrhiq0By"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "0qJ4lm6ciEHT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = get_financial_data(stock_symbol)\n",
        "df1['income_statement'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 540
        },
        "id": "reMdatsL8YVo",
        "outputId": "90d48191-75b8-48cf-db69-b1882a6640a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-1-33dcd4727c54>:23: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  data[key] = pd.read_html(response.text)[0]\n",
            "<ipython-input-1-33dcd4727c54>:23: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  data[key] = pd.read_html(response.text)[0]\n",
            "<ipython-input-1-33dcd4727c54>:23: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  data[key] = pd.read_html(response.text)[0]\n",
            "<ipython-input-1-33dcd4727c54>:23: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  data[key] = pd.read_html(response.text)[0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fiscal Year  Revenue  Revenue Growth (YoY) (%)  Cost of Revenue  Gross Profit  \\\n",
              "TTM          12846.0                     70.88          11143.0       1703.00   \n",
              "FY 2024      11798.0                     85.35          10219.0       1579.00   \n",
              "FY 2023       6365.0                     36.66           5512.0        852.89   \n",
              "FY 2022       4658.0                     18.58           4048.0        609.53   \n",
              "FY 2021       3928.0                     16.07           3278.0        649.63   \n",
              "\n",
              "Fiscal Year  Selling, General & Admin  Other Operating Expenses  \\\n",
              "TTM                            721.30                     39.90   \n",
              "FY 2024                        712.33                     39.90   \n",
              "FY 2023                        512.61                     21.62   \n",
              "FY 2022                        367.23                     14.04   \n",
              "FY 2021                        208.68                     12.01   \n",
              "\n",
              "Fiscal Year  Operating Expenses  Operating Income  Interest Expense  \\\n",
              "TTM                      797.12            905.96           -198.82   \n",
              "FY 2024                  787.41            791.63           -215.35   \n",
              "FY 2023                  539.56            313.33           -157.37   \n",
              "FY 2022                  413.02            196.50            -68.99   \n",
              "FY 2021                  233.37            416.26            -55.38   \n",
              "\n",
              "Fiscal Year  Interest & Investment Income  ...  Gross Margin (%)  \\\n",
              "TTM                                 18.24  ...             13.26   \n",
              "FY 2024                             18.24  ...             13.38   \n",
              "FY 2023                              5.81  ...             13.40   \n",
              "FY 2022                              0.19  ...             13.09   \n",
              "FY 2021                              6.00  ...             16.54   \n",
              "\n",
              "Fiscal Year  Operating Margin (%)  Profit Margin (%)  \\\n",
              "TTM                          7.05               4.80   \n",
              "FY 2024                      6.71               4.22   \n",
              "FY 2023                      4.92              11.35   \n",
              "FY 2022                      4.22               8.83   \n",
              "FY 2021                     10.60               7.73   \n",
              "\n",
              "Fiscal Year  Free Cash Flow Margin (%)   EBITDA  EBITDA Margin (%)  \\\n",
              "TTM                               1.53  1066.00               8.30   \n",
              "FY 2024                           3.48   947.02               8.03   \n",
              "FY 2023                          -1.09   446.10               7.01   \n",
              "FY 2022                          -2.82   337.82               7.25   \n",
              "FY 2021                         -12.93   542.04              13.80   \n",
              "\n",
              "Fiscal Year  D&A For EBITDA    EBIT  EBIT Margin (%)  Effective Tax Rate (%)  \n",
              "TTM                  159.86  905.96             7.05                   22.18  \n",
              "FY 2024              155.39  791.63             6.71                   22.83  \n",
              "FY 2023              132.77  313.33             4.92                    8.45  \n",
              "FY 2022              141.31  196.50             4.22                    9.65  \n",
              "FY 2021              125.78  416.26            10.60                   10.87  \n",
              "\n",
              "[5 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9959e7b3-5e83-4fd2-b07b-cedd3794e8a4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Fiscal Year</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Revenue Growth (YoY) (%)</th>\n",
              "      <th>Cost of Revenue</th>\n",
              "      <th>Gross Profit</th>\n",
              "      <th>Selling, General &amp; Admin</th>\n",
              "      <th>Other Operating Expenses</th>\n",
              "      <th>Operating Expenses</th>\n",
              "      <th>Operating Income</th>\n",
              "      <th>Interest Expense</th>\n",
              "      <th>Interest &amp; Investment Income</th>\n",
              "      <th>...</th>\n",
              "      <th>Gross Margin (%)</th>\n",
              "      <th>Operating Margin (%)</th>\n",
              "      <th>Profit Margin (%)</th>\n",
              "      <th>Free Cash Flow Margin (%)</th>\n",
              "      <th>EBITDA</th>\n",
              "      <th>EBITDA Margin (%)</th>\n",
              "      <th>D&amp;A For EBITDA</th>\n",
              "      <th>EBIT</th>\n",
              "      <th>EBIT Margin (%)</th>\n",
              "      <th>Effective Tax Rate (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TTM</th>\n",
              "      <td>12846.0</td>\n",
              "      <td>70.88</td>\n",
              "      <td>11143.0</td>\n",
              "      <td>1703.00</td>\n",
              "      <td>721.30</td>\n",
              "      <td>39.90</td>\n",
              "      <td>797.12</td>\n",
              "      <td>905.96</td>\n",
              "      <td>-198.82</td>\n",
              "      <td>18.24</td>\n",
              "      <td>...</td>\n",
              "      <td>13.26</td>\n",
              "      <td>7.05</td>\n",
              "      <td>4.80</td>\n",
              "      <td>1.53</td>\n",
              "      <td>1066.00</td>\n",
              "      <td>8.30</td>\n",
              "      <td>159.86</td>\n",
              "      <td>905.96</td>\n",
              "      <td>7.05</td>\n",
              "      <td>22.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2024</th>\n",
              "      <td>11798.0</td>\n",
              "      <td>85.35</td>\n",
              "      <td>10219.0</td>\n",
              "      <td>1579.00</td>\n",
              "      <td>712.33</td>\n",
              "      <td>39.90</td>\n",
              "      <td>787.41</td>\n",
              "      <td>791.63</td>\n",
              "      <td>-215.35</td>\n",
              "      <td>18.24</td>\n",
              "      <td>...</td>\n",
              "      <td>13.38</td>\n",
              "      <td>6.71</td>\n",
              "      <td>4.22</td>\n",
              "      <td>3.48</td>\n",
              "      <td>947.02</td>\n",
              "      <td>8.03</td>\n",
              "      <td>155.39</td>\n",
              "      <td>791.63</td>\n",
              "      <td>6.71</td>\n",
              "      <td>22.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2023</th>\n",
              "      <td>6365.0</td>\n",
              "      <td>36.66</td>\n",
              "      <td>5512.0</td>\n",
              "      <td>852.89</td>\n",
              "      <td>512.61</td>\n",
              "      <td>21.62</td>\n",
              "      <td>539.56</td>\n",
              "      <td>313.33</td>\n",
              "      <td>-157.37</td>\n",
              "      <td>5.81</td>\n",
              "      <td>...</td>\n",
              "      <td>13.40</td>\n",
              "      <td>4.92</td>\n",
              "      <td>11.35</td>\n",
              "      <td>-1.09</td>\n",
              "      <td>446.10</td>\n",
              "      <td>7.01</td>\n",
              "      <td>132.77</td>\n",
              "      <td>313.33</td>\n",
              "      <td>4.92</td>\n",
              "      <td>8.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2022</th>\n",
              "      <td>4658.0</td>\n",
              "      <td>18.58</td>\n",
              "      <td>4048.0</td>\n",
              "      <td>609.53</td>\n",
              "      <td>367.23</td>\n",
              "      <td>14.04</td>\n",
              "      <td>413.02</td>\n",
              "      <td>196.50</td>\n",
              "      <td>-68.99</td>\n",
              "      <td>0.19</td>\n",
              "      <td>...</td>\n",
              "      <td>13.09</td>\n",
              "      <td>4.22</td>\n",
              "      <td>8.83</td>\n",
              "      <td>-2.82</td>\n",
              "      <td>337.82</td>\n",
              "      <td>7.25</td>\n",
              "      <td>141.31</td>\n",
              "      <td>196.50</td>\n",
              "      <td>4.22</td>\n",
              "      <td>9.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2021</th>\n",
              "      <td>3928.0</td>\n",
              "      <td>16.07</td>\n",
              "      <td>3278.0</td>\n",
              "      <td>649.63</td>\n",
              "      <td>208.68</td>\n",
              "      <td>12.01</td>\n",
              "      <td>233.37</td>\n",
              "      <td>416.26</td>\n",
              "      <td>-55.38</td>\n",
              "      <td>6.00</td>\n",
              "      <td>...</td>\n",
              "      <td>16.54</td>\n",
              "      <td>10.60</td>\n",
              "      <td>7.73</td>\n",
              "      <td>-12.93</td>\n",
              "      <td>542.04</td>\n",
              "      <td>13.80</td>\n",
              "      <td>125.78</td>\n",
              "      <td>416.26</td>\n",
              "      <td>10.60</td>\n",
              "      <td>10.87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 38 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9959e7b3-5e83-4fd2-b07b-cedd3794e8a4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9959e7b3-5e83-4fd2-b07b-cedd3794e8a4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9959e7b3-5e83-4fd2-b07b-cedd3794e8a4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89cd64ef-8708-4fce-bf5c-aaa06fad661a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89cd64ef-8708-4fce-bf5c-aaa06fad661a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89cd64ef-8708-4fce-bf5c-aaa06fad661a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1['balance_sheet'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "CrZ0HThS9Cb8",
        "outputId": "1162fa3b-f78f-4fca-c254-4f169d7f274f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fiscal Year  Cash & Equivalents  Cash & Short-Term Investments  \\\n",
              "TTM                      167.26                         377.94   \n",
              "FY 2024                  347.72                         347.72   \n",
              "FY 2023                  218.65                         218.65   \n",
              "FY 2022                  141.60                         141.60   \n",
              "FY 2021                  124.62                         124.62   \n",
              "\n",
              "Fiscal Year  Cash Growth (%)  Accounts Receivable  Other Receivables  \\\n",
              "TTM                    26.92              2516.00               0.00   \n",
              "FY 2024                59.04              2275.00             185.74   \n",
              "FY 2023                54.41              2266.00             151.91   \n",
              "FY 2022                13.62              1598.00             147.91   \n",
              "FY 2021              1571.46               911.68             201.38   \n",
              "\n",
              "Fiscal Year  Receivables  Inventory  Prepaid Expenses  Other Current Assets  \\\n",
              "TTM               2595.0     254.22              0.00                  0.00   \n",
              "FY 2024           2472.0     256.05              1.58                 71.41   \n",
              "FY 2023           2421.0     307.28              1.06                351.67   \n",
              "FY 2022           1749.0     128.97              1.61                383.25   \n",
              "FY 2021           1115.0     212.99              0.26                363.37   \n",
              "\n",
              "Fiscal Year  Total Current Assets  ...  Filing Date Shares Outstanding  \\\n",
              "TTM                        3228.0  ...                          148.49   \n",
              "FY 2024                    3148.0  ...                          148.49   \n",
              "FY 2023                    3299.0  ...                          148.49   \n",
              "FY 2022                    2404.0  ...                          148.49   \n",
              "FY 2021                    1816.0  ...                          149.02   \n",
              "\n",
              "Fiscal Year  Total Common Shares Outstanding  Working Capital  \\\n",
              "TTM                                   148.49          2081.00   \n",
              "FY 2024                               148.49          2018.00   \n",
              "FY 2023                               148.49          2095.00   \n",
              "FY 2022                               148.49          1377.00   \n",
              "FY 2021                               149.02           946.12   \n",
              "\n",
              "Fiscal Year  Book Value Per Share  Tangible Book Value  \\\n",
              "TTM                         34.45               5113.0   \n",
              "FY 2024                     33.30               4942.0   \n",
              "FY 2023                     30.57               4538.0   \n",
              "FY 2022                     21.25               3154.0   \n",
              "FY 2021                     18.41               2743.0   \n",
              "\n",
              "Fiscal Year  Tangible Book Value Per Share    Land  Buildings  Machinery  \\\n",
              "TTM                                  34.43    0.00       0.00        0.0   \n",
              "FY 2024                              33.28  566.74    1432.00     1868.0   \n",
              "FY 2023                              30.56  566.74    1352.00     1626.0   \n",
              "FY 2022                              21.24  282.63     905.33     1521.0   \n",
              "FY 2021                              18.41  273.52     589.35     1438.0   \n",
              "\n",
              "Fiscal Year  Construction In Progress  \n",
              "TTM                              0.00  \n",
              "FY 2024                        233.99  \n",
              "FY 2023                          6.76  \n",
              "FY 2022                         62.92  \n",
              "FY 2021                        297.01  \n",
              "\n",
              "[5 rows x 46 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6154dc8-ebb5-4782-9b8d-324ff56e04c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Fiscal Year</th>\n",
              "      <th>Cash &amp; Equivalents</th>\n",
              "      <th>Cash &amp; Short-Term Investments</th>\n",
              "      <th>Cash Growth (%)</th>\n",
              "      <th>Accounts Receivable</th>\n",
              "      <th>Other Receivables</th>\n",
              "      <th>Receivables</th>\n",
              "      <th>Inventory</th>\n",
              "      <th>Prepaid Expenses</th>\n",
              "      <th>Other Current Assets</th>\n",
              "      <th>Total Current Assets</th>\n",
              "      <th>...</th>\n",
              "      <th>Filing Date Shares Outstanding</th>\n",
              "      <th>Total Common Shares Outstanding</th>\n",
              "      <th>Working Capital</th>\n",
              "      <th>Book Value Per Share</th>\n",
              "      <th>Tangible Book Value</th>\n",
              "      <th>Tangible Book Value Per Share</th>\n",
              "      <th>Land</th>\n",
              "      <th>Buildings</th>\n",
              "      <th>Machinery</th>\n",
              "      <th>Construction In Progress</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TTM</th>\n",
              "      <td>167.26</td>\n",
              "      <td>377.94</td>\n",
              "      <td>26.92</td>\n",
              "      <td>2516.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2595.0</td>\n",
              "      <td>254.22</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3228.0</td>\n",
              "      <td>...</td>\n",
              "      <td>148.49</td>\n",
              "      <td>148.49</td>\n",
              "      <td>2081.00</td>\n",
              "      <td>34.45</td>\n",
              "      <td>5113.0</td>\n",
              "      <td>34.43</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2024</th>\n",
              "      <td>347.72</td>\n",
              "      <td>347.72</td>\n",
              "      <td>59.04</td>\n",
              "      <td>2275.00</td>\n",
              "      <td>185.74</td>\n",
              "      <td>2472.0</td>\n",
              "      <td>256.05</td>\n",
              "      <td>1.58</td>\n",
              "      <td>71.41</td>\n",
              "      <td>3148.0</td>\n",
              "      <td>...</td>\n",
              "      <td>148.49</td>\n",
              "      <td>148.49</td>\n",
              "      <td>2018.00</td>\n",
              "      <td>33.30</td>\n",
              "      <td>4942.0</td>\n",
              "      <td>33.28</td>\n",
              "      <td>566.74</td>\n",
              "      <td>1432.00</td>\n",
              "      <td>1868.0</td>\n",
              "      <td>233.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2023</th>\n",
              "      <td>218.65</td>\n",
              "      <td>218.65</td>\n",
              "      <td>54.41</td>\n",
              "      <td>2266.00</td>\n",
              "      <td>151.91</td>\n",
              "      <td>2421.0</td>\n",
              "      <td>307.28</td>\n",
              "      <td>1.06</td>\n",
              "      <td>351.67</td>\n",
              "      <td>3299.0</td>\n",
              "      <td>...</td>\n",
              "      <td>148.49</td>\n",
              "      <td>148.49</td>\n",
              "      <td>2095.00</td>\n",
              "      <td>30.57</td>\n",
              "      <td>4538.0</td>\n",
              "      <td>30.56</td>\n",
              "      <td>566.74</td>\n",
              "      <td>1352.00</td>\n",
              "      <td>1626.0</td>\n",
              "      <td>6.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2022</th>\n",
              "      <td>141.60</td>\n",
              "      <td>141.60</td>\n",
              "      <td>13.62</td>\n",
              "      <td>1598.00</td>\n",
              "      <td>147.91</td>\n",
              "      <td>1749.0</td>\n",
              "      <td>128.97</td>\n",
              "      <td>1.61</td>\n",
              "      <td>383.25</td>\n",
              "      <td>2404.0</td>\n",
              "      <td>...</td>\n",
              "      <td>148.49</td>\n",
              "      <td>148.49</td>\n",
              "      <td>1377.00</td>\n",
              "      <td>21.25</td>\n",
              "      <td>3154.0</td>\n",
              "      <td>21.24</td>\n",
              "      <td>282.63</td>\n",
              "      <td>905.33</td>\n",
              "      <td>1521.0</td>\n",
              "      <td>62.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2021</th>\n",
              "      <td>124.62</td>\n",
              "      <td>124.62</td>\n",
              "      <td>1571.46</td>\n",
              "      <td>911.68</td>\n",
              "      <td>201.38</td>\n",
              "      <td>1115.0</td>\n",
              "      <td>212.99</td>\n",
              "      <td>0.26</td>\n",
              "      <td>363.37</td>\n",
              "      <td>1816.0</td>\n",
              "      <td>...</td>\n",
              "      <td>149.02</td>\n",
              "      <td>149.02</td>\n",
              "      <td>946.12</td>\n",
              "      <td>18.41</td>\n",
              "      <td>2743.0</td>\n",
              "      <td>18.41</td>\n",
              "      <td>273.52</td>\n",
              "      <td>589.35</td>\n",
              "      <td>1438.0</td>\n",
              "      <td>297.01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 46 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6154dc8-ebb5-4782-9b8d-324ff56e04c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6154dc8-ebb5-4782-9b8d-324ff56e04c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6154dc8-ebb5-4782-9b8d-324ff56e04c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-083da614-d142-4de5-98f4-a2e0b1117043\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-083da614-d142-4de5-98f4-a2e0b1117043')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-083da614-d142-4de5-98f4-a2e0b1117043 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1['cash_flow'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "WsfGdb1p9EZ_",
        "outputId": "d52eba68-614d-4f6e-ddc2-5838a5425fa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fiscal Year  Net Income  Depreciation & Amortization  Other Amortization  \\\n",
              "TTM              616.06                       161.84                 0.1   \n",
              "FY 2024          497.37                       157.37                 0.1   \n",
              "FY 2023          722.19                       134.14                 0.1   \n",
              "FY 2022          411.41                       141.69                 0.1   \n",
              "FY 2021          303.47                       125.78                 0.1   \n",
              "\n",
              "Fiscal Year  Loss (Gain) From Sale of Assets  \\\n",
              "TTM                                   -36.24   \n",
              "FY 2024                               -22.62   \n",
              "FY 2023                               -48.10   \n",
              "FY 2022                               -26.44   \n",
              "FY 2021                                -3.28   \n",
              "\n",
              "Fiscal Year  Asset Writedown & Restructuring Costs  \\\n",
              "TTM                                            0.0   \n",
              "FY 2024                                        0.0   \n",
              "FY 2023                                        0.0   \n",
              "FY 2022                                        0.0   \n",
              "FY 2021                                        0.0   \n",
              "\n",
              "Fiscal Year  Provision & Write-off of Bad Debts  Other Operating Activities  \\\n",
              "TTM                                       35.92                      -42.89   \n",
              "FY 2024                                   35.18                       18.66   \n",
              "FY 2023                                    5.33                       -2.27   \n",
              "FY 2022                                   31.76                      -68.32   \n",
              "FY 2021                                   12.67                       28.77   \n",
              "\n",
              "Fiscal Year  Change in Accounts Receivable  Change in Inventory  \\\n",
              "TTM                                -214.29                79.51   \n",
              "FY 2024                             -37.23                60.71   \n",
              "FY 2023                            -656.12              -128.19   \n",
              "FY 2022                            -605.44                71.66   \n",
              "FY 2021                            -207.49                50.67   \n",
              "\n",
              "Fiscal Year  Change in Accounts Payable  ...  Financing Cash Flow  \\\n",
              "TTM                               40.78  ...               -24.30   \n",
              "FY 2024                            5.19  ...               -26.58   \n",
              "FY 2023                           10.81  ...              -156.05   \n",
              "FY 2022                           36.53  ...                67.67   \n",
              "FY 2021                           -6.88  ...               572.10   \n",
              "\n",
              "Fiscal Year  Net Cash Flow  Free Cash Flow  Free Cash Flow Margin (%)  \\\n",
              "TTM                 127.52          196.68                       1.53   \n",
              "FY 2024             268.98          410.93                       3.48   \n",
              "FY 2023            -223.07          -69.63                      -1.09   \n",
              "FY 2022             -63.79         -131.46                      -2.82   \n",
              "FY 2021              66.63         -507.97                     -12.93   \n",
              "\n",
              "Fiscal Year  Free Cash Flow Per Share  Cash Interest Paid  \\\n",
              "TTM                              1.32              235.35   \n",
              "FY 2024                          2.77              215.02   \n",
              "FY 2023                         -0.47              144.79   \n",
              "FY 2022                         -0.89               69.03   \n",
              "FY 2021                         -3.42               65.06   \n",
              "\n",
              "Fiscal Year  Cash Income Tax Paid  Levered Free Cash Flow  \\\n",
              "TTM                        138.94                  194.08   \n",
              "FY 2024                    119.54                  304.33   \n",
              "FY 2023                     65.54                 -690.86   \n",
              "FY 2022                     44.03                 -463.66   \n",
              "FY 2021                     37.59                 -584.79   \n",
              "\n",
              "Fiscal Year  Unlevered Free Cash Flow  Change in Net Working Capital  \n",
              "TTM                            318.35                        -232.28  \n",
              "FY 2024                        438.93                        -345.96  \n",
              "FY 2023                       -592.51                         804.37  \n",
              "FY 2022                       -420.54                         511.06  \n",
              "FY 2021                       -550.18                         401.05  \n",
              "\n",
              "[5 rows x 36 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da5e0a04-11af-486f-8f6b-09d027fea46d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Fiscal Year</th>\n",
              "      <th>Net Income</th>\n",
              "      <th>Depreciation &amp; Amortization</th>\n",
              "      <th>Other Amortization</th>\n",
              "      <th>Loss (Gain) From Sale of Assets</th>\n",
              "      <th>Asset Writedown &amp; Restructuring Costs</th>\n",
              "      <th>Provision &amp; Write-off of Bad Debts</th>\n",
              "      <th>Other Operating Activities</th>\n",
              "      <th>Change in Accounts Receivable</th>\n",
              "      <th>Change in Inventory</th>\n",
              "      <th>Change in Accounts Payable</th>\n",
              "      <th>...</th>\n",
              "      <th>Financing Cash Flow</th>\n",
              "      <th>Net Cash Flow</th>\n",
              "      <th>Free Cash Flow</th>\n",
              "      <th>Free Cash Flow Margin (%)</th>\n",
              "      <th>Free Cash Flow Per Share</th>\n",
              "      <th>Cash Interest Paid</th>\n",
              "      <th>Cash Income Tax Paid</th>\n",
              "      <th>Levered Free Cash Flow</th>\n",
              "      <th>Unlevered Free Cash Flow</th>\n",
              "      <th>Change in Net Working Capital</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TTM</th>\n",
              "      <td>616.06</td>\n",
              "      <td>161.84</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-36.24</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.92</td>\n",
              "      <td>-42.89</td>\n",
              "      <td>-214.29</td>\n",
              "      <td>79.51</td>\n",
              "      <td>40.78</td>\n",
              "      <td>...</td>\n",
              "      <td>-24.30</td>\n",
              "      <td>127.52</td>\n",
              "      <td>196.68</td>\n",
              "      <td>1.53</td>\n",
              "      <td>1.32</td>\n",
              "      <td>235.35</td>\n",
              "      <td>138.94</td>\n",
              "      <td>194.08</td>\n",
              "      <td>318.35</td>\n",
              "      <td>-232.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2024</th>\n",
              "      <td>497.37</td>\n",
              "      <td>157.37</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-22.62</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.18</td>\n",
              "      <td>18.66</td>\n",
              "      <td>-37.23</td>\n",
              "      <td>60.71</td>\n",
              "      <td>5.19</td>\n",
              "      <td>...</td>\n",
              "      <td>-26.58</td>\n",
              "      <td>268.98</td>\n",
              "      <td>410.93</td>\n",
              "      <td>3.48</td>\n",
              "      <td>2.77</td>\n",
              "      <td>215.02</td>\n",
              "      <td>119.54</td>\n",
              "      <td>304.33</td>\n",
              "      <td>438.93</td>\n",
              "      <td>-345.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2023</th>\n",
              "      <td>722.19</td>\n",
              "      <td>134.14</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-48.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.33</td>\n",
              "      <td>-2.27</td>\n",
              "      <td>-656.12</td>\n",
              "      <td>-128.19</td>\n",
              "      <td>10.81</td>\n",
              "      <td>...</td>\n",
              "      <td>-156.05</td>\n",
              "      <td>-223.07</td>\n",
              "      <td>-69.63</td>\n",
              "      <td>-1.09</td>\n",
              "      <td>-0.47</td>\n",
              "      <td>144.79</td>\n",
              "      <td>65.54</td>\n",
              "      <td>-690.86</td>\n",
              "      <td>-592.51</td>\n",
              "      <td>804.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2022</th>\n",
              "      <td>411.41</td>\n",
              "      <td>141.69</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-26.44</td>\n",
              "      <td>0.0</td>\n",
              "      <td>31.76</td>\n",
              "      <td>-68.32</td>\n",
              "      <td>-605.44</td>\n",
              "      <td>71.66</td>\n",
              "      <td>36.53</td>\n",
              "      <td>...</td>\n",
              "      <td>67.67</td>\n",
              "      <td>-63.79</td>\n",
              "      <td>-131.46</td>\n",
              "      <td>-2.82</td>\n",
              "      <td>-0.89</td>\n",
              "      <td>69.03</td>\n",
              "      <td>44.03</td>\n",
              "      <td>-463.66</td>\n",
              "      <td>-420.54</td>\n",
              "      <td>511.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2021</th>\n",
              "      <td>303.47</td>\n",
              "      <td>125.78</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-3.28</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.67</td>\n",
              "      <td>28.77</td>\n",
              "      <td>-207.49</td>\n",
              "      <td>50.67</td>\n",
              "      <td>-6.88</td>\n",
              "      <td>...</td>\n",
              "      <td>572.10</td>\n",
              "      <td>66.63</td>\n",
              "      <td>-507.97</td>\n",
              "      <td>-12.93</td>\n",
              "      <td>-3.42</td>\n",
              "      <td>65.06</td>\n",
              "      <td>37.59</td>\n",
              "      <td>-584.79</td>\n",
              "      <td>-550.18</td>\n",
              "      <td>401.05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 36 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da5e0a04-11af-486f-8f6b-09d027fea46d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-da5e0a04-11af-486f-8f6b-09d027fea46d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-da5e0a04-11af-486f-8f6b-09d027fea46d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-85774637-b645-49bd-9f32-977d62d3ef0d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-85774637-b645-49bd-9f32-977d62d3ef0d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-85774637-b645-49bd-9f32-977d62d3ef0d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1['ratios'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "KUqlTGoC9GjA",
        "outputId": "199680c7-3c4d-4482-e263-2d1222cddb83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fiscal Year  Market Capitalization  Market Cap Growth (%)  Enterprise Value  \\\n",
              "Current                     5377.0                 102.27            5903.0   \n",
              "FY 2024                     5225.0                  86.28            5860.0   \n",
              "FY 2023                     2805.0                   4.42            3475.0   \n",
              "FY 2022                     2686.0                 -34.61            3473.0   \n",
              "FY 2021                     4108.0                   0.00            4617.0   \n",
              "\n",
              "Fiscal Year  Last Close Price  PE Ratio  PS Ratio  PB Ratio  P/FCF Ratio  \\\n",
              "Current                 36.21      8.73      0.42      1.05        27.34   \n",
              "FY 2024                 35.19     10.51      0.44      1.06        12.72   \n",
              "FY 2023                 18.89      3.88      0.44      0.62       -40.29   \n",
              "FY 2022                 18.09      6.53      0.58      0.85       -20.43   \n",
              "FY 2021                 27.67     13.54      1.05      1.50        -8.09   \n",
              "\n",
              "Fiscal Year  P/OCF Ratio  EV/Sales Ratio  ...  Quick Ratio  Current Ratio  \\\n",
              "Current             6.53            0.46  ...         2.52           2.81   \n",
              "FY 2024             5.39            0.50  ...         2.48           2.78   \n",
              "FY 2023            59.39            0.55  ...         2.19           2.74   \n",
              "FY 2022            63.00            0.75  ...         1.84           2.34   \n",
              "FY 2021           151.02            1.18  ...         1.42           2.09   \n",
              "\n",
              "Fiscal Year  Return on Equity (ROE) (%)  Return on Assets (ROA) (%)  \\\n",
              "Current                           12.69                        9.21   \n",
              "FY 2024                           10.49                        8.21   \n",
              "FY 2023                           18.77                        3.88   \n",
              "FY 2022                           13.95                        3.10   \n",
              "FY 2021                           13.11                        8.16   \n",
              "\n",
              "Fiscal Year  Return on Capital (ROIC) (%)  Earnings Yield (%)  FCF Yield (%)  \\\n",
              "Current                              9.74               11.46           3.66   \n",
              "FY 2024                              8.68                9.52           7.86   \n",
              "FY 2023                              4.07               25.75          -2.48   \n",
              "FY 2022                              3.26               15.32          -4.89   \n",
              "FY 2021                              8.61                7.39         -12.36   \n",
              "\n",
              "Fiscal Year  Payout Ratio (%)  Buyback Yield / Dilution (%)  \\\n",
              "Current                  0.02                          -0.0   \n",
              "FY 2024                  0.05                           0.0   \n",
              "FY 2023                  0.02                           0.0   \n",
              "FY 2022                  0.12                           0.0   \n",
              "FY 2021                 73.27                         -55.7   \n",
              "\n",
              "Fiscal Year  Total Shareholder Return (%)  \n",
              "Current                              -0.0  \n",
              "FY 2024                               0.0  \n",
              "FY 2023                               0.0  \n",
              "FY 2022                               0.0  \n",
              "FY 2021                             -55.7  \n",
              "\n",
              "[5 rows x 28 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08998216-f1e1-4fd4-b016-c85698659e61\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Fiscal Year</th>\n",
              "      <th>Market Capitalization</th>\n",
              "      <th>Market Cap Growth (%)</th>\n",
              "      <th>Enterprise Value</th>\n",
              "      <th>Last Close Price</th>\n",
              "      <th>PE Ratio</th>\n",
              "      <th>PS Ratio</th>\n",
              "      <th>PB Ratio</th>\n",
              "      <th>P/FCF Ratio</th>\n",
              "      <th>P/OCF Ratio</th>\n",
              "      <th>EV/Sales Ratio</th>\n",
              "      <th>...</th>\n",
              "      <th>Quick Ratio</th>\n",
              "      <th>Current Ratio</th>\n",
              "      <th>Return on Equity (ROE) (%)</th>\n",
              "      <th>Return on Assets (ROA) (%)</th>\n",
              "      <th>Return on Capital (ROIC) (%)</th>\n",
              "      <th>Earnings Yield (%)</th>\n",
              "      <th>FCF Yield (%)</th>\n",
              "      <th>Payout Ratio (%)</th>\n",
              "      <th>Buyback Yield / Dilution (%)</th>\n",
              "      <th>Total Shareholder Return (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Current</th>\n",
              "      <td>5377.0</td>\n",
              "      <td>102.27</td>\n",
              "      <td>5903.0</td>\n",
              "      <td>36.21</td>\n",
              "      <td>8.73</td>\n",
              "      <td>0.42</td>\n",
              "      <td>1.05</td>\n",
              "      <td>27.34</td>\n",
              "      <td>6.53</td>\n",
              "      <td>0.46</td>\n",
              "      <td>...</td>\n",
              "      <td>2.52</td>\n",
              "      <td>2.81</td>\n",
              "      <td>12.69</td>\n",
              "      <td>9.21</td>\n",
              "      <td>9.74</td>\n",
              "      <td>11.46</td>\n",
              "      <td>3.66</td>\n",
              "      <td>0.02</td>\n",
              "      <td>-0.0</td>\n",
              "      <td>-0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2024</th>\n",
              "      <td>5225.0</td>\n",
              "      <td>86.28</td>\n",
              "      <td>5860.0</td>\n",
              "      <td>35.19</td>\n",
              "      <td>10.51</td>\n",
              "      <td>0.44</td>\n",
              "      <td>1.06</td>\n",
              "      <td>12.72</td>\n",
              "      <td>5.39</td>\n",
              "      <td>0.50</td>\n",
              "      <td>...</td>\n",
              "      <td>2.48</td>\n",
              "      <td>2.78</td>\n",
              "      <td>10.49</td>\n",
              "      <td>8.21</td>\n",
              "      <td>8.68</td>\n",
              "      <td>9.52</td>\n",
              "      <td>7.86</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2023</th>\n",
              "      <td>2805.0</td>\n",
              "      <td>4.42</td>\n",
              "      <td>3475.0</td>\n",
              "      <td>18.89</td>\n",
              "      <td>3.88</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.62</td>\n",
              "      <td>-40.29</td>\n",
              "      <td>59.39</td>\n",
              "      <td>0.55</td>\n",
              "      <td>...</td>\n",
              "      <td>2.19</td>\n",
              "      <td>2.74</td>\n",
              "      <td>18.77</td>\n",
              "      <td>3.88</td>\n",
              "      <td>4.07</td>\n",
              "      <td>25.75</td>\n",
              "      <td>-2.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2022</th>\n",
              "      <td>2686.0</td>\n",
              "      <td>-34.61</td>\n",
              "      <td>3473.0</td>\n",
              "      <td>18.09</td>\n",
              "      <td>6.53</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.85</td>\n",
              "      <td>-20.43</td>\n",
              "      <td>63.00</td>\n",
              "      <td>0.75</td>\n",
              "      <td>...</td>\n",
              "      <td>1.84</td>\n",
              "      <td>2.34</td>\n",
              "      <td>13.95</td>\n",
              "      <td>3.10</td>\n",
              "      <td>3.26</td>\n",
              "      <td>15.32</td>\n",
              "      <td>-4.89</td>\n",
              "      <td>0.12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2021</th>\n",
              "      <td>4108.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>4617.0</td>\n",
              "      <td>27.67</td>\n",
              "      <td>13.54</td>\n",
              "      <td>1.05</td>\n",
              "      <td>1.50</td>\n",
              "      <td>-8.09</td>\n",
              "      <td>151.02</td>\n",
              "      <td>1.18</td>\n",
              "      <td>...</td>\n",
              "      <td>1.42</td>\n",
              "      <td>2.09</td>\n",
              "      <td>13.11</td>\n",
              "      <td>8.16</td>\n",
              "      <td>8.61</td>\n",
              "      <td>7.39</td>\n",
              "      <td>-12.36</td>\n",
              "      <td>73.27</td>\n",
              "      <td>-55.7</td>\n",
              "      <td>-55.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 28 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08998216-f1e1-4fd4-b016-c85698659e61')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-08998216-f1e1-4fd4-b016-c85698659e61 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-08998216-f1e1-4fd4-b016-c85698659e61');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b5a9f661-d294-4183-b91d-7e5049e99bc5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b5a9f661-d294-4183-b91d-7e5049e99bc5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b5a9f661-d294-4183-b91d-7e5049e99bc5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "nbPMpmxuU_el",
        "outputId": "15277b64-9336-4d03-b101-cf1c38ec7ebc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-efced954d99b>:17: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  df_income = pd.read_html(response.text)[0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fiscal Year  Revenue  Revenue Growth (YoY) (%)  Cost of Revenue  Gross Profit  \\\n",
              "TTM          12846.0                     70.88          11143.0       1703.00   \n",
              "FY 2024      11798.0                     85.35          10219.0       1579.00   \n",
              "FY 2023       6365.0                     36.66           5512.0        852.89   \n",
              "FY 2022       4658.0                     18.58           4048.0        609.53   \n",
              "FY 2021       3928.0                     16.07           3278.0        649.63   \n",
              "\n",
              "Fiscal Year  Selling, General & Admin  Other Operating Expenses  \\\n",
              "TTM                            721.30                     39.90   \n",
              "FY 2024                        712.33                     39.90   \n",
              "FY 2023                        512.61                     21.62   \n",
              "FY 2022                        367.23                     14.04   \n",
              "FY 2021                        208.68                     12.01   \n",
              "\n",
              "Fiscal Year  Operating Expenses  Operating Income  Interest Expense  \\\n",
              "TTM                      797.12            905.96           -198.82   \n",
              "FY 2024                  787.41            791.63           -215.35   \n",
              "FY 2023                  539.56            313.33           -157.37   \n",
              "FY 2022                  413.02            196.50            -68.99   \n",
              "FY 2021                  233.37            416.26            -55.38   \n",
              "\n",
              "Fiscal Year  Interest & Investment Income  ...  Gross Margin (%)  \\\n",
              "TTM                                 18.24  ...             13.26   \n",
              "FY 2024                             18.24  ...             13.38   \n",
              "FY 2023                              5.81  ...             13.40   \n",
              "FY 2022                              0.19  ...             13.09   \n",
              "FY 2021                              6.00  ...             16.54   \n",
              "\n",
              "Fiscal Year  Operating Margin (%)  Profit Margin (%)  \\\n",
              "TTM                          7.05               4.80   \n",
              "FY 2024                      6.71               4.22   \n",
              "FY 2023                      4.92              11.35   \n",
              "FY 2022                      4.22               8.83   \n",
              "FY 2021                     10.60               7.73   \n",
              "\n",
              "Fiscal Year  Free Cash Flow Margin (%)   EBITDA  EBITDA Margin (%)  \\\n",
              "TTM                               1.53  1066.00               8.30   \n",
              "FY 2024                           3.48   947.02               8.03   \n",
              "FY 2023                          -1.09   446.10               7.01   \n",
              "FY 2022                          -2.82   337.82               7.25   \n",
              "FY 2021                         -12.93   542.04              13.80   \n",
              "\n",
              "Fiscal Year  D&A For EBITDA    EBIT  EBIT Margin (%)  Effective Tax Rate (%)  \n",
              "TTM                  159.86  905.96             7.05                   22.18  \n",
              "FY 2024              155.39  791.63             6.71                   22.83  \n",
              "FY 2023              132.77  313.33             4.92                    8.45  \n",
              "FY 2022              141.31  196.50             4.22                    9.65  \n",
              "FY 2021              125.78  416.26            10.60                   10.87  \n",
              "\n",
              "[5 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd52fd2b-7f3f-409a-b750-47adfb92b61b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Fiscal Year</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Revenue Growth (YoY) (%)</th>\n",
              "      <th>Cost of Revenue</th>\n",
              "      <th>Gross Profit</th>\n",
              "      <th>Selling, General &amp; Admin</th>\n",
              "      <th>Other Operating Expenses</th>\n",
              "      <th>Operating Expenses</th>\n",
              "      <th>Operating Income</th>\n",
              "      <th>Interest Expense</th>\n",
              "      <th>Interest &amp; Investment Income</th>\n",
              "      <th>...</th>\n",
              "      <th>Gross Margin (%)</th>\n",
              "      <th>Operating Margin (%)</th>\n",
              "      <th>Profit Margin (%)</th>\n",
              "      <th>Free Cash Flow Margin (%)</th>\n",
              "      <th>EBITDA</th>\n",
              "      <th>EBITDA Margin (%)</th>\n",
              "      <th>D&amp;A For EBITDA</th>\n",
              "      <th>EBIT</th>\n",
              "      <th>EBIT Margin (%)</th>\n",
              "      <th>Effective Tax Rate (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TTM</th>\n",
              "      <td>12846.0</td>\n",
              "      <td>70.88</td>\n",
              "      <td>11143.0</td>\n",
              "      <td>1703.00</td>\n",
              "      <td>721.30</td>\n",
              "      <td>39.90</td>\n",
              "      <td>797.12</td>\n",
              "      <td>905.96</td>\n",
              "      <td>-198.82</td>\n",
              "      <td>18.24</td>\n",
              "      <td>...</td>\n",
              "      <td>13.26</td>\n",
              "      <td>7.05</td>\n",
              "      <td>4.80</td>\n",
              "      <td>1.53</td>\n",
              "      <td>1066.00</td>\n",
              "      <td>8.30</td>\n",
              "      <td>159.86</td>\n",
              "      <td>905.96</td>\n",
              "      <td>7.05</td>\n",
              "      <td>22.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2024</th>\n",
              "      <td>11798.0</td>\n",
              "      <td>85.35</td>\n",
              "      <td>10219.0</td>\n",
              "      <td>1579.00</td>\n",
              "      <td>712.33</td>\n",
              "      <td>39.90</td>\n",
              "      <td>787.41</td>\n",
              "      <td>791.63</td>\n",
              "      <td>-215.35</td>\n",
              "      <td>18.24</td>\n",
              "      <td>...</td>\n",
              "      <td>13.38</td>\n",
              "      <td>6.71</td>\n",
              "      <td>4.22</td>\n",
              "      <td>3.48</td>\n",
              "      <td>947.02</td>\n",
              "      <td>8.03</td>\n",
              "      <td>155.39</td>\n",
              "      <td>791.63</td>\n",
              "      <td>6.71</td>\n",
              "      <td>22.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2023</th>\n",
              "      <td>6365.0</td>\n",
              "      <td>36.66</td>\n",
              "      <td>5512.0</td>\n",
              "      <td>852.89</td>\n",
              "      <td>512.61</td>\n",
              "      <td>21.62</td>\n",
              "      <td>539.56</td>\n",
              "      <td>313.33</td>\n",
              "      <td>-157.37</td>\n",
              "      <td>5.81</td>\n",
              "      <td>...</td>\n",
              "      <td>13.40</td>\n",
              "      <td>4.92</td>\n",
              "      <td>11.35</td>\n",
              "      <td>-1.09</td>\n",
              "      <td>446.10</td>\n",
              "      <td>7.01</td>\n",
              "      <td>132.77</td>\n",
              "      <td>313.33</td>\n",
              "      <td>4.92</td>\n",
              "      <td>8.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2022</th>\n",
              "      <td>4658.0</td>\n",
              "      <td>18.58</td>\n",
              "      <td>4048.0</td>\n",
              "      <td>609.53</td>\n",
              "      <td>367.23</td>\n",
              "      <td>14.04</td>\n",
              "      <td>413.02</td>\n",
              "      <td>196.50</td>\n",
              "      <td>-68.99</td>\n",
              "      <td>0.19</td>\n",
              "      <td>...</td>\n",
              "      <td>13.09</td>\n",
              "      <td>4.22</td>\n",
              "      <td>8.83</td>\n",
              "      <td>-2.82</td>\n",
              "      <td>337.82</td>\n",
              "      <td>7.25</td>\n",
              "      <td>141.31</td>\n",
              "      <td>196.50</td>\n",
              "      <td>4.22</td>\n",
              "      <td>9.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FY 2021</th>\n",
              "      <td>3928.0</td>\n",
              "      <td>16.07</td>\n",
              "      <td>3278.0</td>\n",
              "      <td>649.63</td>\n",
              "      <td>208.68</td>\n",
              "      <td>12.01</td>\n",
              "      <td>233.37</td>\n",
              "      <td>416.26</td>\n",
              "      <td>-55.38</td>\n",
              "      <td>6.00</td>\n",
              "      <td>...</td>\n",
              "      <td>16.54</td>\n",
              "      <td>10.60</td>\n",
              "      <td>7.73</td>\n",
              "      <td>-12.93</td>\n",
              "      <td>542.04</td>\n",
              "      <td>13.80</td>\n",
              "      <td>125.78</td>\n",
              "      <td>416.26</td>\n",
              "      <td>10.60</td>\n",
              "      <td>10.87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 38 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd52fd2b-7f3f-409a-b750-47adfb92b61b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bd52fd2b-7f3f-409a-b750-47adfb92b61b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bd52fd2b-7f3f-409a-b750-47adfb92b61b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-71a80fb7-dc03-4e59-94d8-ba6ce962568e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71a80fb7-dc03-4e59-94d8-ba6ce962568e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-71a80fb7-dc03-4e59-94d8-ba6ce962568e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_income"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "\n",
        "stock = 'TOMCL'\n",
        "url = f'http://stockanalysis.com/quote/psx/{stock}/financials/'\n",
        "\n",
        "# Set headers to mimic a browser\n",
        "headers = {\n",
        "    'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n",
        "}\n",
        "\n",
        "# Make the request with headers\n",
        "response = requests.get(url, headers=headers)\n",
        "\n",
        "# Check if the request was successful\n",
        "if response.status_code == 200:\n",
        "    df_income = pd.read_html(response.text)[0]\n",
        "else:\n",
        "    print(f\"Error: {response.status_code}\")\n",
        "\n",
        "# dropping the second header\n",
        "df_income.columns = df_income.columns.droplevel(1)\n",
        "\n",
        "# transpose the dataframe and reset the column\n",
        "df_income = df_income.T\n",
        "df_income.columns = df_income.iloc[0]\n",
        "df_income = df_income[1:]\n",
        "\n",
        "# Cleaning the data (for converting object data to numeric)\n",
        "# Find all columns where '%' sign is present\n",
        "percent_columns = [col for col in df_income.columns if df_income[col].astype(object).str.contains('%').any()]\n",
        "\n",
        "# Add '%' sign to column names\n",
        "df_income.rename(columns={col: f\"{col} (%)\" for col in percent_columns}, inplace=True)\n",
        "\n",
        "# dropping last row that contains \"Upgrade\" in all columns\n",
        "df_income.drop(index = df_income.index[-1], axis = 0, inplace = True)\n",
        "\n",
        "# replacing empty data with 0\n",
        "df_income.replace('-', '0', inplace=True)\n",
        "\n",
        "# replacing % with ''\n",
        "df_income = df_income.replace('%', '', regex=True)\n",
        "df_income.head()\n",
        "\n",
        "df_income = df_income.astype(float)\n",
        "df_income.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_income.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "og8C7GQZjMwm",
        "outputId": "8435d715-48b5-48dc-adca-1e30f8dc35bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 6 entries, TTM to FY 2020\n",
            "Data columns (total 38 columns):\n",
            " #   Column                                 Non-Null Count  Dtype  \n",
            "---  ------                                 --------------  -----  \n",
            " 0   Revenue                                6 non-null      float64\n",
            " 1   Revenue Growth (YoY) (%)               6 non-null      float64\n",
            " 2   Cost of Revenue                        6 non-null      float64\n",
            " 3   Gross Profit                           6 non-null      float64\n",
            " 4   Selling, General & Admin               6 non-null      float64\n",
            " 5   Other Operating Expenses               6 non-null      float64\n",
            " 6   Operating Expenses                     6 non-null      float64\n",
            " 7   Operating Income                       6 non-null      float64\n",
            " 8   Interest Expense                       6 non-null      float64\n",
            " 9   Interest & Investment Income           6 non-null      float64\n",
            " 10  Currency Exchange Gain (Loss)          6 non-null      float64\n",
            " 11  Other Non Operating Income (Expenses)  6 non-null      float64\n",
            " 12  EBT Excluding Unusual Items            6 non-null      float64\n",
            " 13  Gain (Loss) on Sale of Investments     6 non-null      float64\n",
            " 14  Gain (Loss) on Sale of Assets          6 non-null      float64\n",
            " 15  Pretax Income                          6 non-null      float64\n",
            " 16  Income Tax Expense                     6 non-null      float64\n",
            " 17  Net Income                             6 non-null      float64\n",
            " 18  Net Income to Common                   6 non-null      float64\n",
            " 19  Net Income Growth (%)                  6 non-null      float64\n",
            " 20  Shares Outstanding (Basic)             6 non-null      float64\n",
            " 21  Shares Outstanding (Diluted)           6 non-null      float64\n",
            " 22  Shares Change (YoY) (%)                6 non-null      float64\n",
            " 23  EPS (Basic)                            6 non-null      float64\n",
            " 24  EPS (Diluted)                          6 non-null      float64\n",
            " 25  EPS Growth (%)                         6 non-null      float64\n",
            " 26  Free Cash Flow                         6 non-null      float64\n",
            " 27  Free Cash Flow Per Share               6 non-null      float64\n",
            " 28  Gross Margin (%)                       6 non-null      float64\n",
            " 29  Operating Margin (%)                   6 non-null      float64\n",
            " 30  Profit Margin (%)                      6 non-null      float64\n",
            " 31  Free Cash Flow Margin (%)              6 non-null      float64\n",
            " 32  EBITDA                                 6 non-null      float64\n",
            " 33  EBITDA Margin (%)                      6 non-null      float64\n",
            " 34  D&A For EBITDA                         6 non-null      float64\n",
            " 35  EBIT                                   6 non-null      float64\n",
            " 36  EBIT Margin (%)                        6 non-null      float64\n",
            " 37  Effective Tax Rate (%)                 6 non-null      float64\n",
            "dtypes: float64(38)\n",
            "memory usage: 1.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Valuation Methods"
      ],
      "metadata": {
        "id": "F_48jwuFdjVY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to calculate Gordon Growth Model (GGM) valuation\n",
        "def gordon_growth_model(D1, r, g):\n",
        "    if r <= g:\n",
        "        return \"Required return must be greater than the growth rate.\"\n",
        "    return D1 / (r - g)\n",
        "\n",
        "# Function to calculate Discounted Cash Flow (DCF) valuation\n",
        "def discounted_cash_flow_valuation(recent_free_cash_flow, growth_rate, discount_rate):\n",
        "    projected_cash_flows = []\n",
        "    # Project cash flows for the next 5 years\n",
        "    for year in range(1, 6):\n",
        "        future_cash_flow = recent_free_cash_flow * ((1 + growth_rate) ** year)\n",
        "        present_value = future_cash_flow / ((1 + discount_rate) ** year)\n",
        "        projected_cash_flows.append(present_value)\n",
        "\n",
        "    # Sum the present values of projected cash flows to get the fair value\n",
        "    fair_value = sum(projected_cash_flows)\n",
        "    return fair_value\n",
        "\n",
        "# Function to calculate PEG Ratio\n",
        "def peg_ratio(pe, g):\n",
        "    if g == 0:\n",
        "        return \"Growth rate cannot be zero.\"\n",
        "    return pe / g\n",
        "\n",
        "# Function to visualize the results with Line Chart only\n",
        "def visualize_line_chart(data, labels, title):\n",
        "    \"\"\"\n",
        "    Visualize the results using only a Line Chart.\n",
        "    \"\"\"\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.plot(labels, data, marker='o', color='purple')\n",
        "    ax.set_ylabel(\"Value ($)\")\n",
        "    ax.set_title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Main program to take user inputs and use Yahoo Finance data\n",
        "stock_symbol = input(\"Enter stock symbol (e.g., AAPL for Apple): \")  # Take stock symbol as input from user\n",
        "\n",
        "# Fetch stock data using yfinance\n",
        "stock = yf.Ticker(stock_symbol)\n",
        "\n",
        "# Get financials from the stock data\n",
        "cash_flow = stock.cashflow\n",
        "info = stock.info\n",
        "\n",
        "# Extract relevant financial data (Free Cash Flow, P/E ratio, and Growth Rate)\n",
        "free_cash_flow = cash_flow.loc['Free Cash Flow'].values[0]  # Most recent Free Cash Flow\n",
        "pe_ratio = info.get('trailingPE', None)  # P/E ratio\n",
        "growth_rate = info.get('earningsQuarterlyGrowth', 0.05)  # Example: Earnings growth rate (quarterly)\n",
        "\n",
        "# Show the fetched data\n",
        "print(f\"\\nFetched Data for {stock_symbol}:\")\n",
        "print(f\"Free Cash Flow: ${free_cash_flow:,.2f}\")\n",
        "print(f\"P/E Ratio: {pe_ratio}\")\n",
        "print(f\"Earnings Growth Rate (Quarterly): {growth_rate * 100:.2f}%\")\n",
        "\n",
        "# Get user input for Discount Rate\n",
        "discount_rate = float(input(\"Enter discount rate (%): \")) / 100\n",
        "\n",
        "# Select valuation method\n",
        "print(\"\\nSelect Valuation Method:\")\n",
        "print(\"1. Gordon Growth Model (GGM)\")\n",
        "print(\"2. Discounted Cash Flow (DCF)\")\n",
        "print(\"3. PEG Ratio\")\n",
        "method = int(input(\"Enter your choice (1, 2, or 3): \"))\n",
        "\n",
        "# Initialize Variables for each Method\n",
        "if method == 1:  # Gordon Growth Model (GGM)\n",
        "    print(\"\\n--- Gordon Growth Model (GGM) ---\")\n",
        "    # User input for Dividend and required return rate\n",
        "    dividend = float(input(\"Enter expected dividend next year ($): \"))  # User input\n",
        "    growth_rate_ggm = float(input(\"Enter dividend growth rate (%): \")) / 100  # User input\n",
        "    required_rate = float(input(\"Enter required rate of return (%): \")) / 100  # User input\n",
        "\n",
        "    # Calculation\n",
        "    fair_value_ggm = gordon_growth_model(dividend, required_rate, growth_rate_ggm)\n",
        "    print(f\"Fair value using GGM: {fair_value_ggm}\")\n",
        "\n",
        "    # Visualization using Line Chart\n",
        "    if isinstance(fair_value_ggm, float):\n",
        "        data = [dividend, growth_rate_ggm * 100, required_rate * 100]\n",
        "        labels = [\"Dividend ($)\", \"Growth Rate (%)\", \"Required Return (%)\"]\n",
        "        visualize_line_chart(data, labels, f\"{stock_symbol} - GGM Valuation\")\n",
        "\n",
        "elif method == 2:  # Discounted Cash Flow (DCF)\n",
        "    print(\"\\n--- Discounted Cash Flow (DCF) ---\")\n",
        "    # Calculation for DCF using fetched data\n",
        "    fair_value_dcf = discounted_cash_flow_valuation(free_cash_flow, growth_rate, discount_rate)\n",
        "    print(f\"Fair value using DCF: ${fair_value_dcf:,.2f}\")\n",
        "\n",
        "    # Visualization using Line Chart\n",
        "    years = np.arange(1, 6)\n",
        "    projected_cash_flows = [free_cash_flow * ((1 + growth_rate) ** year) / ((1 + discount_rate) ** year) for year in years]\n",
        "    visualize_line_chart(projected_cash_flows, years, f\"{stock_symbol} - DCF Valuation\")\n",
        "\n",
        "elif method == 3:  # PEG Ratio\n",
        "    print(\"\\n--- PEG Ratio ---\")\n",
        "    # Calculation for PEG Ratio using fetched data\n",
        "    peg_val = peg_ratio(pe_ratio, growth_rate)\n",
        "    print(f\"PEG Ratio: {peg_val}\")\n",
        "\n",
        "    # Visualization using Line Chart\n",
        "    if isinstance(peg_val, float):\n",
        "        data = [pe_ratio, growth_rate * 100, peg_val]\n",
        "        labels = [\"P/E Ratio\", \"Growth Rate (%)\", \"PEG Ratio\"]\n",
        "        visualize_line_chart(data, labels, f\"{stock_symbol} - PEG Ratio Valuation\")\n",
        "\n",
        "else:\n",
        "    print(\"Invalid choice. Please select a valid option (1, 2, or 3).\")\n"
      ],
      "metadata": {
        "id": "6aU_9TnzQ1mc",
        "outputId": "644f5ba1-8ea5-4670-947a-537f73fe7836",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 744
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter stock symbol (e.g., AAPL for Apple): WMT\n",
            "\n",
            "Fetched Data for WMT:\n",
            "Free Cash Flow: $15,120,000,000.00\n",
            "P/E Ratio: 44.182293\n",
            "Earnings Growth Rate (Quarterly): -43.00%\n",
            "Enter discount rate (%): 43\n",
            "\n",
            "Select Valuation Method:\n",
            "1. Gordon Growth Model (GGM)\n",
            "2. Discounted Cash Flow (DCF)\n",
            "3. PEG Ratio\n",
            "Enter your choice (1, 2, or 3): 2\n",
            "\n",
            "--- Discounted Cash Flow (DCF) ---\n",
            "Fair value using DCF: $9,920,557,798.53\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to fetch financial data from Yahoo Finance and plot it\n",
        "def fetch_and_plot_financials(stock_symbol, metric):\n",
        "    # Fetch stock data using yfinance\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "\n",
        "    # Get the financial data (Income Statement)\n",
        "    income_statement = stock.financials.T  # Transpose to have years as rows\n",
        "\n",
        "    # Check if the selected metric exists in the data\n",
        "    if metric not in income_statement.columns:\n",
        "        print(f\"Error: The metric '{metric}' is not available in the income statement data.\")\n",
        "        return\n",
        "\n",
        "    # Extract data for the selected metric\n",
        "    data = income_statement[metric]\n",
        "\n",
        "    # Plotting the selected metric (e.g., Revenue, Net Income, etc.)\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(data.index, data.values, marker='o', color='blue', label=metric)\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Amount ($)')\n",
        "    plt.title(f'{metric} for {stock_symbol} Over Time')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.grid(True)\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Main function to take user inputs\n",
        "def main():\n",
        "    # Take stock symbol input from the user\n",
        "    stock_symbol = input(\"Enter stock symbol (e.g., AAPL for Apple): \")\n",
        "\n",
        "    # Display available financial metrics\n",
        "    print(\"\\nAvailable financial metrics for the income statement:\")\n",
        "    print(\"1. Revenue\")\n",
        "    print(\"2. Gross Profit\")\n",
        "    print(\"3. Operating Income\")\n",
        "    print(\"4. Net Income\")\n",
        "    print(\"5. EPS (Basic)\")\n",
        "\n",
        "    # Take metric selection input from the user\n",
        "    metric_choice = int(input(\"Enter the number corresponding to the metric you want to plot (1-5): \"))\n",
        "\n",
        "    # Map the user choice to the actual metric name in the DataFrame\n",
        "    metric_map = {\n",
        "        1: 'Revenue',\n",
        "        2: 'Gross Profit',\n",
        "        3: 'Operating Income',\n",
        "        4: 'Net Income',\n",
        "        5: 'EPS'\n",
        "    }\n",
        "\n",
        "    metric = metric_map.get(metric_choice)\n",
        "\n",
        "    if metric:\n",
        "        # Fetch data and plot the selected metric\n",
        "        fetch_and_plot_financials(stock_symbol, metric)\n",
        "    else:\n",
        "        print(\"Invalid selection. Please choose a valid option.\")\n",
        "\n",
        "# Run the program\n",
        "main()\n",
        "\n",
        "def fetch_and_plot_financials(stock_symbol, metric):\n",
        "    # Fetch stock data using yfinance\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "\n",
        "    # Get the financial data (Income Statement)\n",
        "    income_statement = stock.financials.T  # Transpose to have years as rows\n",
        "\n",
        "    # Check if the selected metric exists in the data\n",
        "    if metric not in income_statement.columns:\n",
        "        print(f\"Error: The metric '{metric}' is not available in the income statement data.\")\n",
        "        return\n",
        "\n",
        "    # Extract data for the selected metric\n",
        "    data = income_statement[metric]\n",
        "\n",
        "    # Plotting the selected metric (e.g., Revenue, Net Income, etc.)\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(data.index, data.values, marker='o', color='blue', label=metric)\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Amount ($)')\n",
        "    plt.title(f'{metric} for {stock_symbol} Over Time')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.grid(True)\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Main function to take user inputs\n",
        "def main():\n",
        "    # Take stock symbol input from the user\n",
        "    stock_symbol = input(\"Enter stock symbol (e.g., AAPL for Apple): \")\n",
        "\n",
        "    # Display available financial metrics\n",
        "    print(\"\\nAvailable financial metrics for the income statement:\")\n",
        "    print(\"1. Revenue\")\n",
        "    print(\"2. Gross Profit\")\n",
        "    print(\"3. Operating Income\")\n",
        "    print(\"4. Net Income\")\n",
        "    print(\"5. EPS (Basic)\")\n",
        "\n",
        "    # Take metric selection input from the user\n",
        "    metric_choice = int(input(\"Enter the number corresponding to the metric you want to plot (1-5): \"))\n",
        "\n",
        "    # Map the user choice to the actual metric name in the DataFrame\n",
        "    metric_map = {\n",
        "        1: 'Revenue',\n",
        "        2: 'Gross Profit',\n",
        "        3: 'Operating Income',\n",
        "        4: 'Net Income',\n",
        "        5: 'EPS'\n",
        "    }\n",
        "\n",
        "    metric = metric_map.get(metric_choice)\n",
        "\n",
        "    if metric:\n",
        "        # Fetch data and plot the selected metric\n",
        "        fetch_and_plot_financials(stock_symbol, metric)\n",
        "    else:\n",
        "        print(\"Invalid selection. Please choose a valid option.\")\n",
        "\n",
        "# Run the program\n",
        "main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 757
        },
        "id": "iJGLeG-V2DVc",
        "outputId": "b887b6c9-af9c-4fa7-b3b0-432bb3ae49c7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter stock symbol (e.g., AAPL for Apple): WMT\n",
            "\n",
            "Available financial metrics for the income statement:\n",
            "1. Revenue\n",
            "2. Gross Profit\n",
            "3. Operating Income\n",
            "4. Net Income\n",
            "5. EPS (Basic)\n",
            "Enter the number corresponding to the metric you want to plot (1-5): 4\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}